#!/bin/bash

# CURL_OPTS=()
CURL_OPTS=(-s)

portalTmp=/tmp/portal
agtoolTmp=/tmp/agtool

agtoolSessionJson="${portalTmp}"/session/json.txt
agtoolSessionData="${portalTmp}"/session/data.txt
agtoolPortalUrl=
agtoolUser=
agtoolToken=
agtoolTokenExpires=
agtoolTokenValid=0
agtoolTokenValidFor=

#----------------------------------------------------------------------
#
#----------------------------------------------------------------------


flatjson() {
  python -c '
import json, sys

def combine(attr, prefix):
    return attr if prefix == "" else prefix + "." + attr

def flatjson(obj, prefix = ""):
    if isinstance(obj, list):
        print combine("len", prefix) + "\t" + str(len(obj))
        for i, row in enumerate(obj):
            flatjson(obj[i], prefix + "[" + str(i) + "]")
    elif isinstance(obj, dict):
        for attr, val in obj.items():
            flatjson(val, combine(attr, prefix))
    else:
        print prefix + "\t" + json.dumps(obj)

flatjson(json.load(sys.stdin))
'
}


#----------------------------------------------------------------------
#
#----------------------------------------------------------------------


makeFolderForFile() {

  __makeFolderForFile_filePath=$1

  mkdir -p "$(dirname "${__makeFolderForFile_filePath}")"

}


#----------------------------------------------------------------------
#
#----------------------------------------------------------------------


generateToken() {

  local __user=
  local __password=
  local __referer=
  local __tokenServicesUrl=
  local __f=pjson
  local __other=()
  local __arg=
  local __key=
  while [ "$1" != "" ]; do
    __arg="$1"
    shift
    case "${__arg}" in
    -*) __key="${__arg#-}" ;;
    *)
      case "${__key}" in
      user)             __user="${__arg}" ;;
      password)         __password="${__arg}" ;;
      referer)          __referer="${__arg}" ;;
      tokenServicesUrl) __tokenServicesUrl="${__arg}" ;;
      f)                __f="${__arg}" ;;
      *)                __other+=(-d "${__key}=${__arg}") ;;
      esac
    esac
  done

  local args=()
  args+=("${CURL_OPTS[@]}")
  args+=(-X POST)
  args+=(-d username="${__user}")
  args+=(-d password="${__password}")
  args+=(-d referer="${__referer}")
  args+=(-d f="${__f}")
  args+=("${__other[@]}")
  args+=("${__tokenServicesUrl}")
  curl "${args[@]}" | cat
  echo

}


#----------------------------------------------------------------------
#
#----------------------------------------------------------------------


getString() {
  perl -pe 's/^\S*\s*"(.*)"$/\1/'
}


#----------------------------------------------------------------------
#
#----------------------------------------------------------------------


getValue() {
  perl -pe 's/^\S*\s*(.*)$/\1/'
}


#----------------------------------------------------------------------
#
#----------------------------------------------------------------------


getLinesByKey() {

  local __key=$1
  local __filePath=$2

  grep '^'"${__key}"'\s\s*' "${__filePath}"

}


#----------------------------------------------------------------------
#
#----------------------------------------------------------------------


getStringFromFile() {

  local __key=$1
  local __filePath=$2

  getLinesByKey "${__key}" "${__filePath}" | getString

}


#----------------------------------------------------------------------
#
#----------------------------------------------------------------------


getValueFromFile() {

  local __key=$1
  local __filePath=$2

  getLinesByKey "${__key}" "${__filePath}" | getValue

}

#----------------------------------------------------------------------
#
#----------------------------------------------------------------------


validateSession() {

  agtoolTokenValid=0
  [ "${agtoolToken}" == "" ] && return
  [ "${agtoolTokenExpires}" == "" ] && return
  (( now=$(date +%s) * 1000,1 ))
  (( agtoolTokenValid = now < agtoolTokenExpires,1 ))
  (( agtoolTokenValidFor=(agtoolTokenExpires - now) / 1000 / 60,1 ))
}


#----------------------------------------------------------------------
#
#----------------------------------------------------------------------


portalUserContent() {

  local __portalUrl=
  local __user=
  local __token=
  local __folderId=
  local __f=pjson
  local __other=()
  local __arg=
  local __key=
  while [ "$1" != "" ]; do
    __arg="$1"
    shift
    case "${__arg}" in
    -*) __key="${__arg#-}" ;;
    *)
      case "${__key}" in
      portalUrl) __portalUrl="${__arg}" ;;
      user)      __user="${__arg}" ;;
      token)     __token="${__arg}" ;;
      folderId)  __folderId="${__arg}" ;;
      f)         __f="${__arg}" ;;
      *)         __other+=(-d "${__key}=${__arg}") ;;
      esac
    esac
  done

  local __url="${__portalUrl}"/sharing/rest/content/users/"${__user}"
  [ "${__folderId}" != "" ] && __url="${__url}"/"${__folderId}"

  local args=()
  args+=("${CURL_OPTS[@]}")
  args+=(-G)
  args+=(-d f=pjson)
  args+=(-d token="${__token}")
  args+=("${__other[@]}")
  args+=("${__url}")
  curl "${args[@]}" | cat
  echo

}


#----------------------------------------------------------------------
#
#----------------------------------------------------------------------


portalDeleteFolder() {

  local __portalUrl=
  local __user=
  local __folderId=
  local __token=
  local __f=pjson
  local __other=()
  local __arg=
  local __key=
  while [ "$1" != "" ]; do
    __arg="$1"
    shift
    case "${__arg}" in
    -*) __key="${__arg#-}" ;;
    *)
      case "${__key}" in
      portalUrl) __portalUrl="${__arg}" ;;
      user)      __user="${__arg}" ;;
      folderId)  __folderId="${__arg}" ;;
      token)     __token="${__arg}" ;;
      f)         __f="${__arg}" ;;
      *)         __other+=(-d "${__key}=${__arg}") ;;
      esac
    esac
  done

  local args=()
  args+=("${CURL_OPTS[@]}")
  args+=(-X POST)
  args+=(-d token="${__token}")
  args+=(-d f=pjson)
  args+=("${__portalUrl}"/sharing/rest/content/users/"${__user}"/"${__folderId}"/delete)
  curl "${args[@]}" | cat
  echo

}

#----------------------------------------------------------------------
#
#----------------------------------------------------------------------


portalDeleteFolderIfExists() {

  local __portalUrl=
  local __user=
  local __folderTitle=
  local __token=
  local __f=pjson
  local __other=()
  local __arg=
  local __key=
  while [ "$1" != "" ]; do
    __arg="$1"
    shift
    case "${__arg}" in
    -*) __key="${__arg#-}" ;;
    *)
      case "${__key}" in
      portalUrl)    __portalUrl="${__arg}" ;;
      user)         __user="${__arg}" ;;
      folderTitle)  __folderTitle="${__arg}" ;;
      token)        __token="${__arg}" ;;
      f)            __f="${__arg}" ;;
      *)            __other+=("${__key}" "${__arg}") ;;
      esac
    esac
  done

  local __json="${agtoolTmp}"/deleteFolderIfExists/json.txt
  local __data="${agtoolTmp}"/deleteFolderIfExists/data.txt

  makeFolderForFile "${__json}"
  makeFolderForFile "${__data}"

  local args=()
  args+=(-portalUrl "${__portalUrl}")
  args+=(-user      "${__user}")
  args+=(-token     "${__token}")
  portalUserContent "${args[@]}" | tee "${__json}" | flatjson > "${__data}"

  local __folderIndex=$(grep '^folders\[.*\]\.title\s*"'"${__folderTitle}"'"' "${__data}" | perl -pe 's/^folders\[(.*)\].*/\1/')
  if [ "${__folderIndex}" == "" ]; then
    cat << EOF
{
  "success": true,
  "cached": true,
  "folder": {
    "username": "${__user}",
    "title": "${__folderTitle}"
  }
}
EOF
    return
  fi

  local __folderId=$(grep '^folders\['"${__folderIndex}"'\].id\s*".*"$' "${__data}" | getString)

  args=()
  args+=(-portalUrl "${__portalUrl}")
  args+=(-user      "${__user}")
  args+=(-folderId  "${__folderId}")
  args+=(-token     "${__token}")
  portalDeleteFolder "${args[@]}"

}


#----------------------------------------------------------------------
#
#----------------------------------------------------------------------

portalCreateFolder() {

  local __portalUrl=
  local __user=
  local __folderTitle=
  local __token=
  local __f=pjson
  local __other=()
  local __arg=
  local __key=
  while [ "$1" != "" ]; do
    __arg="$1"
    shift
    case "${__arg}" in
    -*) __key="${__arg#-}" ;;
    *)
      case "${__key}" in
      portalUrl)    __portalUrl="${__arg}" ;;
      user)         __user="${__arg}" ;;
      folderTitle)  __folderTitle="${__arg}" ;;
      token)        __token="${__arg}" ;;
      f)            __f="${__arg}" ;;
      *)            __other+=(-d "${__key}=${__arg}") ;;
      esac
    esac
  done

  local args=()
  args+=("${CURL_OPTS[@]}")
  args+=(-X POST)
  args+=(-d title="${__folderTitle}")
  args+=(-d token="${__token}")
  args+=(-d f=pjson)
  args+=("${__portalUrl}"/sharing/rest/content/users/"${__user}"/createFolder)
  curl "${args[@]}" | cat
  echo

}


#----------------------------------------------------------------------
#
#----------------------------------------------------------------------


portalCreateFolderIfNotExists() {

  local __portalUrl=
  local __user=
  local __folderTitle=
  local __token=
  local __f=pjson
  local __other=()
  local __arg=
  local __key=
  while [ "$1" != "" ]; do
    __arg="$1"
    shift
    case "${__arg}" in
    -*) __key="${__arg#-}" ;;
    *)
      case "${__key}" in
      portalUrl)    __portalUrl="${__arg}" ;;
      user)         __user="${__arg}" ;;
      folderTitle)  __folderTitle="${__arg}" ;;
      token)        __token="${__arg}" ;;
      f)            __f="${__arg}" ;;
      *)            __other+=("${__key} ${__arg}") ;;
      esac
    esac
  done

  local __json="${agtoolTmp}"/createFolderIfNotExists/json.txt
  local __data="${agtoolTmp}"/createFolderIfNotExists/data.txt

  makeFolderForFile "${__json}"
  makeFolderForFile "${__data}"

  local args=()
  args+=(-portalUrl "${__portalUrl}")
  args+=(-user      "${__user}")
  args+=(-token     "${__token}")
  portalUserContent "${args[@]}" | tee "${__json}" | flatjson > "${__data}"

  local __folderIndex=$(grep '^folders\[.*\]\.title\s*"'"${__folderTitle}"'"' "${__data}" | perl -pe 's/^folders\[(.*)\].*/\1/')
  if [ "${__folderIndex}" != "" ]; then
    local __folderId=$(grep '^folders\['"${__folderIndex}"'\].id\s*".*"$' "${__data}" | getString)
    cat << EOF
{
  "success": true,
  "cached": true,
  "folder": {
    "username": "${__user}",
    "id": "${__folderId}",
    "title": "${__folderTitle}"
  }
}
EOF
    return
  fi

  local args=()
  args+=(-portalUrl   "${__portalUrl}")
  args+=(-user        "${__user}")
  args+=(-folderTitle "${__folderTitle}")
  args+=(-token       "${__token}")
  portalCreateFolder "${args[@]}"

}


#----------------------------------------------------------------------
#
#----------------------------------------------------------------------


portalDeleteItem() {

  local __portalUrl=
  local __user=
  local __itemId=
  local __token=
  local __folderId=
  local __f=pjson
  local __other=()
  local __arg=
  local __key=
  while [ "$1" != "" ]; do
    __arg="$1"
    shift
    case "${__arg}" in
    -*) __key="${__arg#-}" ;;
    *)
      case "${__key}" in
      portalUrl) __portalUrl="${__arg}" ;;
      user)      __user="${__arg}" ;;
      itemId)    __itemId="${__arg}" ;;
      token)     __token="${__arg}" ;;
      folderId)  __folderId="${__arg}" ;;
      f)         __f="${__arg}" ;;
      *)         __other+=(-d "${__key}=${__arg}") ;;
      esac
    esac
  done

  local __url="${__portalUrl}"/sharing/rest/content/users/"${__user}"/items/"${__itemId}"/delete

  args=()
  args+=("${CURL_OPTS[@]}")
  args+=(-X POST)
  args+=(-d token="${__token}")
  args+=(-d f="${__f}")
  args+=("${__other[@]}")
  args+=("${__url}")
  curl "${args[@]}" | cat
  echo

}


#----------------------------------------------------------------------
#
#----------------------------------------------------------------------

portalDeleteItemIfExists() {

  local __portalUrl=
  local __user=
  local __fileName=
  local __token=
  local __folderTitle=
  local __folderId=
  local __itemId==
  local __f=pjson
  local __other=()
  local __arg=
  local __key=
  while [ "$1" != "" ]; do
    __arg="$1"
    shift
    case "${__arg}" in
    -*) __key="${__arg#-}" ;;
    *)
      case "${__key}" in
      portalUrl)    __portalUrl="${__arg}" ;;
      user)         __user="${__arg}" ;;
      fileName)     __fileName="${__arg}" ;;
      token)        __token="${__arg}" ;;
      folderTitle)  __folderTitle="${__arg}" ;;
      f)            __f="${__arg}" ;;
      *)            __other+=("${__key}" "${__arg}") ;;
      esac
    esac
  done

  local __json="${agtoolTmp}"/deleteItemIfExists/json.txt
  local __data="${agtoolTmp}"/deleteItemIfExists/data.txt

  makeFolderForFile "${__json}"
  makeFolderForFile "${__data}"

  local args=()
  args+=(-portalUrl "${__portalUrl}")
  args+=(-user      "${__user}")
  args+=(-token     "${__token}" )
  portalUserContent "${args[@]}" | tee "${__json}" | flatjson > "${__data}"

  if [ "${__folderTitle}" != "" ]; then

    local __folderIndex=$(grep '^folders\[.*\]\.title\s*"'"${__folderTitle}"'"' "${__data}" | perl -pe 's/^folders\[(.*)\].*/\1/')
    if [ "${__folderIndex}" == "" ]; then
      echo CRAP
      grep "^folders\[.*\]\.title\s*" "${__data}"
      exit 1
    fi

    __folderId=$(grep '^folders\['"${__folderIndex}"'\].id\s*".*"$' "${__data}" | getString)
  
    args=()
    args+=(-portalUrl "${__portalUrl}")
    args+=(-user      "${__user}")
    args+=(-token     "${__token}")
    args+=(-folderId  "${__folderId}")
    portalUserContent "${args[@]}" | tee "${__json}" | flatjson > "${__data}"

  fi

  local __itemIndex=$(grep '^items\[.*\]\.name\s*"'"${__fileName}"'"' "${__data}" | perl -pe 's/^items\[(.*)\].*/\1/')
  if [ "${__itemIndex}" == "" ]; then
    cat << EOF
{
  "success": true,
  "cached": true
}
EOF
    return
  fi

  __itemId=$(grep '^items\['"${__itemIndex}"'\].id\s*".*"$' "${__data}" | getString)

  local args=()
  args+=(-portalUrl "${__portalUrl}")
  args+=(-user      "${__user}")
  args+=(-itemId    "${__itemId}")
  args+=(-token     "${__token}")
  args+=(-folderId  "${__folderId}")
  portalDeleteItem "${args[@]}"

}


#----------------------------------------------------------------------
#
#----------------------------------------------------------------------


portalUpdateItem() {

  local __portalUrl=
  local __user=
  local __itemId=
  local __itemTitle=
  local __filePath=
  local __fileName=
  local __token=
  local __folderId=
  local __thumbnail=
  local __f=pjson
  local __other=()
  local __arg=
  local __key=
  while [ "$1" != "" ]; do
    __arg="$1"
    shift
    case "${__arg}" in
    -*) __key="${__arg#-}" ;;
    *)
      case "${__key}" in
      portalUrl) __portalUrl="${__arg}" ;;
      user)      __user="${__arg}" ;;
      itemId)    __itemId="${__arg}" ;;
      itemTitle) __itemTitle="${__arg}" ;;
      itemType)  __itemType="${__arg}" ;;
      filePath)  __filePath="${__arg}" ;;
      fileName)  __fileName="${__arg}" ;;
      token)     __token="${__arg}" ;;
      folderId)  __folderId="${__arg}" ;;
      thumbnail) __thumbnail="${__arg}" ;;
      f)         __f="${__arg}" ;;
      *)         __other+=(-F "${__key}=${__arg}") ;;
      esac
    esac
  done

  local __url="${__portalUrl}"/sharing/rest
  __url="${__url}"/content/users/"${__user}"/items/"${__itemId}"/update

  local __file=
  if [ "${__filePath}" != "" ]; then
    __file="@${__filePath}"
    [ "${__fileName}" != "" ] && __file="${__file}";filename="${__fileName}"
  fi

  local args=()
  args+=("${CURL_OPTS[@]}")
  args+=(-X POST)
  args+=(-F token="${__token}")
  args+=(-F f="${__f}")
  [ "${__itemTitle}" != "" ] && args+=(-F title="${__itemTitle}")
  [ "${__file}"      != "" ] && args+=(-F file="${__file}")
  [ "${__thumbnail}" != "" ] && args+=(-F thumbnail="@${__thumbnail}")
  args+=("${__other[@]}")
  args+=("${__url}")
  curl "${args[@]}" | cat
  echo

}

#----------------------------------------------------------------------
#
#----------------------------------------------------------------------


portalAddItem() {

  local __portalUrl=
  local __user=
  local __itemTitle=
  local __itemType=
  local __filePath=
  local __fileName=
  local __token=
  local __folderId=
  local __thumbnail=
  local __f=pjson
  local __other=()
  local __arg=
  local __key=
  while [ "$1" != "" ]; do
    __arg="$1"
    shift
    case "${__arg}" in
    -*) __key="${__arg#-}" ;;
    *)
      case "${__key}" in
      portalUrl) __portalUrl="${__arg}" ;;
      user)      __user="${__arg}" ;;
      itemTitle) __itemTitle="${__arg}" ;;
      itemType)  __itemType="${__arg}" ;;
      filePath)  __filePath="${__arg}" ;;
      fileName)  __fileName="${__arg}" ;;
      token)     __token="${__arg}" ;;
      folderId)  __folderId="${__arg}" ;;
      thumbnail) __thumbnail="${__arg}" ;;
      f)         __f="${__arg}" ;;
      *)         __other+=(-F "${__key}=${__arg}") ;;
      esac
    esac
  done

  local __url="${__portalUrl}"/sharing/rest/content/users/"${__user}"
  [ "${__folderId}" != "" ] && __url="${__url}"/"${__folderId}"
  __url="${__url}"/addItem

  local args=()
  args+=("${CURL_OPTS[@]}")
  args+=(-X POST)
  args+=(-F title="${__itemTitle}")
  args+=(-F type="${__itemType}")
  args+=(-F file="@${__filePath};filename=${__fileName}")
  args+=(-F token="${__token}")
  args+=(-F f="${__f}")
  [ "${__thumbnail}" != "" ] && args+=(-F thumbnail="@${__thumbnail}")
  args+=("${__other[@]}")
  args+=("${__url}")
  curl "${args[@]}" | cat
  echo

}


#----------------------------------------------------------------------
#
#----------------------------------------------------------------------


portalAddOrUpdateItem() {

  local __portalUrl=
  local __user=
  local __itemId=
  local __itemTitle=
  local __itemType=
  local __filePath=
  local __fileName=
  local __token=
  local __folderId=
  local __folderTitle=
  local __f=pjson
  local __other=()
  local __arg=
  local __key=
  while [ "$1" != "" ]; do
    __arg="$1"
    shift
    case "${__arg}" in
    -*) __key="${__arg#-}" ;;
    *)
      case "${__key}" in
      portalUrl)    __portalUrl="${__arg}" ;;
      user)         __user="${__arg}" ;;
      itemId)       __itemId="${__arg}" ;;
      itemTitle)    __itemTitle="${__arg}" ;;
      itemType)     __itemType="${__arg}" ;;
      filePath)     __filePath="${__arg}" ;;
      fileName)     __fileName="${__arg}" ;;
      token)        __token="${__arg}" ;;
      folderId)     __folderId="${__arg}" ;;
      folderTitle)  __folderTitle="${__arg}" ;;
      f)            __f="${__arg}" ;;
      *)            __other+=("-${__key}" "${__arg}") ;;
      esac
    esac
  done

  local __json="${agtoolTmp}"/addOrUpdateItem/json.txt
  local __data="${agtoolTmp}"/addOrUpdateItem/data.txt

  makeFolderForFile "${__json}"
  makeFolderForFile "${__data}"

  local args=

  if [ "${__folderId}" == "" ] && [ "${__folderTitle}" != "" ]; then

    args=()
    args+=(-portalUrl   "${__portalUrl}")
    args+=(-user        "${__user}")
    args+=(-token       "${__token}")
    args+=(-folderTitle "${__folderTitle}")
    portalCreateFolderIfNotExists "${args[@]}" | tee "${__json}" | flatjson > "${__data}"

    __folderId=$(getStringFromFile folder.id "${__data}")

    if [ "${__folderId}" == "" ]; then
      echo "Cannot create folder ${__folderTitle}"
      cat "${__json}"
      echo
      cat "${__data}"
      echo
      exit 1
    fi

  fi

  if [ "${__itemId}" == "" ]; then

    args=()
    args+=(-portalUrl "${__portalUrl}")
    args+=(-user      "${__user}")
    args+=(-token     "${__token}")
    [ "${__folderId}" != "" ] && args+=(-folderId  "${__folderId}")
    portalUserContent "${args[@]}" | tee "${__json}" | flatjson > "${__data}"

    local __itemIndex=$(grep '^items\[.*\]\.title\s*"'"${__fileName}"'"' "${__data}" | perl -pe 's/^items\[(.*)\].*/\1/')
    if [ "${__itemIndex}" != "" ]; then
      __itemId=$(grep '^items\['"${__itemIndex}"'\].id\s*".*"$' "${__data}" | getString)
    fi

  fi

  if [ "${__itemId}" != "" ]; then

    args=()
    args+=(-portalUrl "${__portalUrl}")
    args+=(-user      "${__user}")
    args+=(-itemId    "${__itemId}")
    args+=(-token     "${__token}")
    [ "${__itemTitle}" != "" ] && args+=(-itemTitle "${__itemTitle}")
    [ "${__filePath}"  != "" ] && args+=(-filePath  "${__filePath}")
    [ "${__fileName}"  != "" ] && args+=(-fileName  "${__fileName}")
    [ "${__folderId}" != "" ]  && args+=(-folderId  "${__folderId}")
    args+=("${__other[@]}")
    portalUpdateItem "${args[@]}"

    return

  fi

  if [ "${__filePath}" == "" ]; then

    cat <<EOF
Item does not exists.
Cannot upload as a new item, when no file supplied.
EOF

    exit 1

  fi

  if [ "${__itemTitle}" == "" ] && [ "${__fileName}" != "" ]; then
    __itemTitle="${__fileName}"
  fi

  args=()
  args+=(-portalUrl "${__portalUrl}")
  args+=(-user      "${__user}")
  args+=(-itemTitle "${__itemTitle}")
  args+=(-itemType  "${__itemType}")
  args+=(-filePath  "${__filePath}")
  args+=(-fileName  "${__fileName}")
  args+=(-token     "${__token}")
  [ "${__folderId}" != "" ] && args+=(-folderId  "${__folderId}")
  args+=("${__other[@]}")
  portalAddItem "${args[@]}"

}


#----------------------------------------------------------------------
#
#----------------------------------------------------------------------

loadSession() {

  agtoolPortalUrl=
  agtoolUser=
  agtoolToken=
  agtoolTokenExpires=
  agtoolTokenValid=0
  agtoolTokenValidFor=

  [ ! -f "${agtoolSessionData}" ] && return

  agtoolPortalUrl=$(getStringFromFile portalUrl "${agtoolSessionData}")
  agtoolUser=$(getStringFromFile user "${agtoolSessionData}")
  agtoolToken=$(getStringFromFile token "${agtoolSessionData}")
  agtoolTokenExpires=$(getValueFromFile tokenExpires "${agtoolSessionData}")

  validateSession

}


#----------------------------------------------------------------------
#
#----------------------------------------------------------------------


showSession() {

  cat << EOF
agtoolToken:         ${agtoolToken}
agtoolTokenExpires:  ${agtoolTokenExpires} ($(date --date='@'$((agtoolTokenExpires / 1000))))
agtoolTokenValid:    ${agtoolTokenValid}
agtoolTokenValidFor: ${agtoolTokenValidFor}
EOF

}

#----------------------------------------------------------------------
#
#----------------------------------------------------------------------

loginTool() {

  local __portalUrl=https://www.arcgis.com
  local __user=
  local __password=
  local __f=pjson
  local __other=()
  local __arg=
  local __key=user
  while [ "$1" != "" ]; do
    __arg="$1"
    shift
    case "${__arg}" in
    -*) __key="${__arg#-}" ;;
    *)
      case "${__key}" in
      portalUrl)    __portalUrl="${__arg}" ;;
      user)         __user="${__arg}" ; key=password ;;
      password)     __password="${__arg}" ; key= ;;
      f)            __f="${__arg}" ;;
      "")           echo "${__arg} skipped" ;;
      *)            __other+=("-${__key}" "${__arg}") ;;
      esac
    esac
  done

  while [ "${__user}" == "" ]; do
    read -p 'Username: ' __user
  done

  while [ "${__password}" == "" ]; do
    read -sp 'Password: ' __password
    echo
  done

  local __json="${agtoolTmp}"/loginTool/json.txt
  local __data="${agtoolTmp}"/loginTool/data.txt

  makeFolderForFile "${__json}"
  makeFolderForFile "${__data}"

  local args=()
  args+=("${CURL_OPTS[@]}")
  args+=(-d f=pjson)
  args+=("${__portalUrl}"/sharing/rest/info)
  curl "${args[@]}" | tee "${__json}" | flatjson > "${__data}"

  local __tokenServicesUrl=$(grep authInfo.tokenServicesUrl "${__data}" | getString)

  args=()
  args+=(-user             ${__user})
  args+=(-password         ${__password})
  args+=(-referer          ${__portalUrl})
  args+=(-tokenServicesUrl ${__tokenServicesUrl})
  generateToken "${args[@]}" | tee ${__json} | flatjson > ${__data}

  local __token=$(getStringFromFile token ${__data})
  local __tokenExpires=$(getValueFromFile expires ${__data})

  makeFolderForFile "${agtoolSessionJson}"
  makeFolderForFile "${agtoolSessionData}"

  tee "${agtoolSessionJson}" << EOF | flatjson > "${agtoolSessionData}"
{
  "portalUrl": "${__portalUrl}",
  "user": "${__user}",
  "token": "${__token}",
  "tokenExpires": ${__tokenExpires}
}
EOF

  loadSession
  showSession

}


#----------------------------------------------------------------------
#
#----------------------------------------------------------------------


loginInfoTool() {

  loadSession
  showSession

}


#----------------------------------------------------------------------
#
#----------------------------------------------------------------------


mkdirTool() {

  loadSession

  if (( !agtoolTokenValid )); then
    echo Please login with: agtool login
    exit 1
  fi

  local __folderTitle=$1

  if [ "${__folderTitle}" == "" ]; then

cat << EOF
Syntax: $0 -mkdir folderTitle
EOF

    exit 1

  fi

  local args=()
  args+=(-portalUrl   "${agtoolPortalUrl}")
  args+=(-user        "${agtoolUser}")
  args+=(-token       "${agtoolToken}")
  args+=(-folderTitle "${__folderTitle}")
  portalCreateFolderIfNotExists "${args[@]}"

}

#----------------------------------------------------------------------
#
#----------------------------------------------------------------------


rmdirTool() {

  loadSession

  if (( !agtoolTokenValid )); then
    echo Please login with: agtool login
    exit 1
  fi

  local __folderTitle=$1

  if [ "${__folderTitle}" == "" ]; then

cat << EOF
Syntax: $0 rmdir folder
EOF

    exit 1

  fi

  args=()
  args+=(-portalUrl   "${agtoolPortalUrl}")
  args+=(-user        "${agtoolUser}")
  args+=(-token       "${agtoolToken}")
  args+=(-folderTitle "${__folderTitle}")
  portalDeleteFolderIfExists "${args[@]}"

}

#----------------------------------------------------------------------
#
#----------------------------------------------------------------------


updateTool() {

  loadSession

  if (( !agtoolTokenValid )); then
    echo Please login with: agtool login
    exit 1
  fi

  local __portalUrl="${agtoolPortalUrl}"
  local __user="${agtoolUser}"
  local __token="${agtoolToken}"
  local __itemId=
  local __itemId=
  local __itemTitle=
  local __itemType="Code Sample"
  local __itemName=
  local __filePath=
  local __outputPath=
  local __f=pjson
  local __other=()
  local __arg=
  local __args=
  local __key=
  while [ "$1" != "" ]; do
    __arg="$1"
    shift

    if [ "${__key}" != "" ]; then
      case "${__key}" in
      id     | itemId)     __itemId="${__arg}" ;;
      title  | itemTitle)  __itemTitle="${__arg}" ;;
      type   | itemType)   __itemType="${__arg}" ;;
      name   | itemName)   __itemName="${__arg}" ;;
      input  | i)          __filePath="${__arg}" ;;
      output | o)          __outputPath="${__arg}" ;;
      f)                   __f="${__arg}" ;;
      *)                   __other+=("-${__key}" "${__arg}") ;;
      esac
      __key=
      continue
    fi

    case "${__arg}" in
    -*) __key="${__arg#-}" ; continue ;;
    esac

    [ "${__itemName}" == "" ] && __itemName="${__arg}" && continue

    echo Skipping "${__arg}"; ((0))

  done

  if [ "${__itemId}" == "" ]; then

    __args=()
    __args+=(-portalUrl   "${__portalUrl}")
    __args+=(-user        "${__user}")
    __args+=(-token       "${__token}")
    [ "${__itemTitle}"   != "" ] && __args+=(-itemTitle   "${__itemTitle}")
    [ "${__itemName}"    != "" ] && __args+=(-itemName    "${__itemName}")
    [ "${__folderTitle}" != "" ] && __args+=(-folderTitle "${__folderTitle}")
    [ "${__folderId}"    != "" ] && __args+=(-folderTitle "${__folderId}")
    __args+=("${__other[@]}")

    __itemId=$(findItemId "${__args[@]}")

  fi

  local __fileName=""
  local __folderTitle=""
  local __tmpFilePath=""

  if [ "${__filePath}" == "-" ]; then

    __tmpFilePath="${agtoolTmp}"/updateTool/filePath-$$.dat
    __filePath="${__tmpFilePath}"

    makeFolderForFile "${__tmpFilePath}"

    cat > "${__tmpFilePath}"

  fi

  if [ "${__outputPath}" == "" ] && [ "${__itemName}" != "" ]; then
    __outputPath="${__itemName}"
  fi

  if [ "${__outputPath}" != "" ]; then
    __fileName=$(basename "${__outputPath}")
    __folderTitle=$(dirname "${__outputPath}")
  fi

  if [ "${__fileName}" == "" ]; then
    __fileName=$(basename "${__filePath}")
  fi

  local args=()
  args+=(-portalUrl   "${agtoolPortalUrl}")
  args+=(-user        "${agtoolUser}")
  args+=(-token       "${agtoolToken}")
  [ "${__itemId}"      != "" ] && args+=(-itemId      "${__itemId}")
  [ "${__itemTitle}"   != "" ] && args+=(-itemTitle   "${__itemTitle}")
  [ "${__itemType}"    != "" ] && args+=(-itemType    "${__itemType}")
  [ "${__filePath}"    != "" ] && args+=(-filePath    "${__filePath}")
  [ "${__fileName}"    != "" ] && args+=(-fileName    "${__fileName}")
  [ "${__folderTitle}" != "" ] && args+=(-folderTitle "${__folderTitle}")
  args+=("${__other[@]}")
  portalAddOrUpdateItem "${args[@]}"

  if [ "${__tmpFilePath}" != "" ] && [ -f "${__tmpFilePath}" ]; then
    rm "${__tmpFilePath}"
  fi

}

#----------------------------------------------------------------------
#
#----------------------------------------------------------------------


findItemId() {

  local __portalUrl=
  local __user=
  local __token=
  local __itemId=
  local __itemTitle=
  local __itemName=
  local __folderTitle=
  local __folderId=
  local __f=pjson
  local __other=()
  local __args=("${@}")
  local __arg=
  local __idx=0
  local __key=name
  while [ "$1" != "" ]; do
    __arg="$1"
    shift
    case "${__arg}" in
    -*) __key="${__arg#-}" ;;
    *)
      case "${__key}" in
      portalUrl)           __portalUrl="${__arg}" ;;
      user)                __user="${__arg}" ;;
      token)               __token="${__arg}" ;;
      id     | itemId)     __itemId="${__arg}" ;;
      title  | itemTitle)  __itemTitle="${__arg}" ;;
      type   | itemType)   __itemType="${__arg}" ;;
      name   | itemName)   __itemName="${__arg}" ;;
      folderTitle )        __folderTitle="${__arg}" ;;
      folderId )           __folderId="${__arg}" ;;
      "")                  echo "Skipping ${__arg}"; ((0)) ;;
      f)                   __f="${__arg}" ;;
      *)                   __other+=("-${__key}" "${__arg}") ;;
      esac
      __key=
    esac
  done

  if [ "${__itemName}" != "" ]; then
    local __basename=$(basename "${__itemName}")
    local __dirname=$(dirname "${__itemName}")
    if [ "${__dirname}" != "." ]; then
      __folderTitle="${__dirname}"
      __itemName="${__basename}"
    fi
  fi

  local __json="${agtoolTmp}"/findItemId/json.txt
  local __data="${agtoolTmp}"/findItemId/data.txt

  makeFolderForFile "${__json}"
  makeFolderForFile "${__data}"

  local args=()

  if [ "${__folderId}" == "" ] && [ "${__folderTitle}" != "" ]; then

    args=()
    args+=(-portalUrl "${__portalUrl}")
    args+=(-user      "${__user}")
    args+=(-token     "${__token}")
    portalUserContent "${args[@]}" | tee "${__json}" | flatjson > "${__data}"

    local __folderIndex=$(grep '^folders\[.*\]\.title\s*"'"${__folderTitle}"'"' "${__data}" | perl -pe 's/^folders\[(.*)\].*/\1/')
    if [ "${__folderIndex}" == "" ]; then
      echo CRAP
      grep "^folders\[.*\]\.title\s*" "${__data}"
      exit 1
    fi

    __folderId=$(grep '^folders\['"${__folderIndex}"'\].id\s*".*"$' "${__data}" | getString)
  fi

  args=()
  args+=(-portalUrl "${__portalUrl}")
  args+=(-user      "${__user}")
  args+=(-token     "${__token}")
  args+=(-folderId  "${__folderId}")
  portalUserContent "${args[@]}" | tee "${__json}" | flatjson > "${__data}"

  local __itemIndex=
  if [ "${__itemName}" != "" ]; then

    local __itemIndex=$(grep '^items\[.*\]\.name\s*"'"${__itemName}"'"' "${__data}" | perl -pe 's/^items\[(.*)\].*/\1/')
    if [ "${__itemIndex}" == "" ]; then return; fi
    grep '^items\['"${__itemIndex}"'\].id\s*".*"$' "${__data}" | getString
    return

  fi

}

#----------------------------------------------------------------------
#
#----------------------------------------------------------------------

catTool() {

  loadSession

  if (( !agtoolTokenValid )); then
    echo Please login with: agtool login
    exit 1
  fi

  local __portalUrl="${agtoolPortalUrl}"
  local __user="${agtoolUser}"
  local __token="${agtoolToken}"
  local __itemId=
  local __itemTitle=
  local __itemType="Code Sample"
  local __itemName=
  local __folderTitle=
  local __folderId=
  local __f=pjson
  local __other=()
  local __args=("${@}")
  local __arg=
  local __idx=0
  local __key=name
  while [ "$1" != "" ]; do
    __arg="$1"
    shift
    case "${__arg}" in
    -*) __key="${__arg#-}" ;;
    *)
      case "${__key}" in
      id     | itemId)     __itemId="${__arg}" ;;
      title  | itemTitle)  __itemTitle="${__arg}" ;;
      type   | itemType)   __itemType="${__arg}" ;;
      name   | itemName)   __itemName="${__arg}" ;;
      folderTitle)         __folderTitle="${__arg}" ;;
      folderId)            __folderId="${__arg}" ;;
      "")                  echo "Skipping ${__arg}"; ((0)) ;;
      f)                   __f="${__arg}" ;;
      *)                   __other+=("-${__key}" "${__arg}") ;;
      esac
      __key=
    esac
  done

  if [ "${__itemId}" == "" ]; then

    __args=()
    __args+=(-portalUrl   "${__portalUrl}")
    __args+=(-user        "${__user}")
    __args+=(-token       "${__token}")
    [ "${__itemTitle}"   != "" ] && __args+=(-itemTitle   "${__itemTitle}")
    [ "${__itemName}"    != "" ] && __args+=(-itemName    "${__itemName}")
    [ "${__folderTitle}" != "" ] && __args+=(-folderTitle "${__folderTitle}")
    [ "${__folderId}"    != "" ] && __args+=(-folderTitle "${__folderId}")
    __args+=("${__other[@]}")

    __itemId=$(findItemId "${__args[@]}")

  fi

  local __url="${__portalUrl}"/sharing/rest/content/items/"${__itemId}"

  args=()
  args+=("${CURL_OPTS[@]}")
  args+=(-L)
  args+=(-F token="${__token}")
  args+=("${__url}"/data)
  curl "${args[@]}" | cat

}

#----------------------------------------------------------------------
#
#----------------------------------------------------------------------


agtoolSyntax() {

  cat << EOF

agtool login     [-user user] [-password -password]
agtool loginInfo
agtool mkdir     [folder]
agtool rmdir     [folder]
agtool update    [-name              [folder/]itemName]
                 [-i                 inputPath]
                 [-description       description]
                 [-snippet           snippet]
                 [-accessInformation accessInformation]
                 [-licenseInfo       licenseInfo]
                 [-thumbnail         thumbnailPath]
agtool cat       [folder/]itemName

EOF

}


#----------------------------------------------------------------------
#
#----------------------------------------------------------------------


agtool() {

  case "$1" in

  login)        shift; loginTool "${@}" ; return ;;
  loginInfo)    shift; loginInfoTool "${@}" ; return ;;
  mkdir)        shift; mkdirTool "${@}" ; return ;;
  rmdir)        shift; rmdirTool "${@}" ; return ;;
  update)       shift; updateTool "${@}" ; return ;;
  cat)          shift; catTool "${@}" ; return ;;

  esac

  loginInfoTool
  agtoolSyntax
  exit 1

}

#----------------------------------------------------------------------

agtool "${@}"

